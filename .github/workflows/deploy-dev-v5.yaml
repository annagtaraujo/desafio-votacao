name: Deploy Minikube v5

on:
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    branches: [dev, main]
    types:
      - completed

permissions:
  contents: read
  actions: read
  packages: read

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    env:
      INIT_DB: ${{ github.event.inputs.init_db }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Install deps (jq + unzip + curl)
      run: |
        sudo apt-get update
        sudo apt-get install -y jq unzip curl

    - name: Decode kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > kubeconfig.yaml

    - name: Test cluster access
      env:
        KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      run: |
        kubectl get pods -A

    - name: Download artifact using REST API
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "📦 Buscando artifacts do run: ${{ github.event.workflow_run.id }}"

        # Pega a lista de artifacts
        artifacts=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts)

        # Encontra o ID do artifact com nome "image-tags"
        artifact_id=$(echo "$artifacts" | jq -r '.artifacts[] | select(.name == "image-tags") | .id')

        if [ -z "$artifact_id" ]; then
          echo "❌ Artifact 'image-tags' não encontrado."
          exit 1
        fi

        echo "✅ Artifact encontrado: $artifact_id — baixando..."

        curl -L -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$artifact_id/zip \
          -o artifact.zip

        unzip artifact.zip

    - name: Inspect image_tags.env
      run: cat image_tags.env
      
    - name: Parse image tag variables
      id: tags
      run: |
        echo "BACKEND_IMAGE=$(grep BACKEND_IMAGE image_tags.env | cut -d '=' -f2-)" >> $GITHUB_ENV
        echo "FRONTEND_IMAGE=$(grep FRONTEND_IMAGE image_tags.env | cut -d '=' -f2-)" >> $GITHUB_ENV
        echo "WORKER_IMAGE=$(grep WORKER_IMAGE image_tags.env | cut -d '=' -f2-)" >> $GITHUB_ENV

    - name: Apply Kubernetes deployments for infrastructure
      env:
        KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      run: |
        echo "Usando BACKEND_IMAGE=$BACKEND_IMAGE"
        echo "Usando FRONTEND_IMAGE=$FRONTEND_IMAGE"
        echo "Usando WORKER_IMAGE=$WORKER_IMAGE"
        envsubst < k8s/dev/deployment/backend-deploy.yaml | kubectl apply -f -
        envsubst < k8s/dev/deployment/frontend-deploy.yaml | kubectl apply -f -
        envsubst < k8s/dev/deployment/worker-deploy.yaml | kubectl apply -f -
        echo "Implementando Redis e Postgres"
        kubectl apply -f k8s/dev/deployment/postgres-deploy.yaml
        kubectl apply -f k8s/dev/deployment/redis-deploy.yaml
        kubectl wait --for=condition=ready pod -l app=redis -n dev --timeout=300s
        kubectl wait --for=condition=ready pod -l app=postgres -n dev --timeout=300s
        echo "Implementando Redis e Postgres Exporters"
        kubectl apply -f k8s/dev/deployment/postgres-exporter-deploy.yaml
        kubectl apply -f k8s/dev/deployment/redis-exporter-deploy.yaml

    - name: Apply Kubernetes Job (Create Postgres Table if INIT_DB=true)
      env:
        KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      if: env.INIT_DB == 'true'
      run: |
        echo "Criando init Job para o Postgres"
        kubectl apply -f k8s/dev/job/postgres-init-job.yaml
