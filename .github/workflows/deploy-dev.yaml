name: Deploy Minikube

on:
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    branches: [main, dev]
    types:
      - completed

permissions:
  contents: read
  actions: read
  packages: read

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Install GitHub CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y gh jq unzip

    - name: Decode kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > kubeconfig.yaml

    - name: Test cluster access
      env:
        KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      run: |
        kubectl get pods -A

    - name: Download image tag artifact via GH CLI
      run: |
        echo "📦 Buscando artifacts do run: ${{ github.event.workflow_run.id }}"
        export GH_TOKEN="${{ github.token }}"
        artifacts=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts)
        artifact_id=$(echo "$artifacts" | jq -r '.artifacts[] | select(.name=="image-tags") | .id')

        if [ -z "$artifact_id" ]; then
          echo "❌ Artifact 'image-tags' não encontrado."
          exit 1
        fi

        echo "✅ Artifact encontrado: $artifact_id — baixando..."
        gh api \
          -H "Accept: application/vnd.github+json" \
          repos/${{ github.repository }}/actions/artifacts/$artifact_id/zip \
          > artifact.zip

        unzip artifact.zip

    - name: Export image tag variables
      run: |
        set -a
        source image_tags.env
        set +a

    - name: Apply Kubernetes configs
      env:
        KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
        BACKEND_IMAGE: ${{ env.BACKEND_IMAGE }}
        FRONTEND_IMAGE: ${{ env.FRONTEND_IMAGE }}
      run: |
        envsubst < k8s/dev/deployment/backend.yaml | kubectl apply -f -
        envsubst < k8s/dev/deployment/frontend.yaml | kubectl apply -f -
